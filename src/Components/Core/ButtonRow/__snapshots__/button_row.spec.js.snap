// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<BottonRow /> snapshots render a button row with multiple button 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ButtonRow
    buttons={
        Array [
            Object {
              "text": "Spec Test Button 1",
            },
            Object {
              "text": "Spec Test Button 2",
              "type": "submit",
            },
          ]
    }
    large={4}
    small={6}
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <Cell
          className=""
>
          <input
                    className="button"
                    type="button"
                    value="Spec Test Button 1"
          />
</Cell>,
        <Cell
          className=""
>
          <input
                    className="button"
                    type="submit"
                    value="Spec Test Button 2"
          />
</Cell>,
      ],
      "className": "align-justify",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": "0",
        "nodeType": "function",
        "props": Object {
          "children": <input
            className="button"
            type="button"
            value="Spec Test Button 1"
/>,
          "className": "",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "className": "button",
            "type": "button",
            "value": "Spec Test Button 1",
          },
          "ref": null,
          "rendered": null,
          "type": "input",
        },
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": "1",
        "nodeType": "function",
        "props": Object {
          "children": <input
            className="button"
            type="submit"
            value="Spec Test Button 2"
/>,
          "className": "",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "className": "button",
            "type": "submit",
            "value": "Spec Test Button 2",
          },
          "ref": null,
          "rendered": null,
          "type": "input",
        },
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <Cell
            className=""
>
            <input
                        className="button"
                        type="button"
                        value="Spec Test Button 1"
            />
</Cell>,
          <Cell
            className=""
>
            <input
                        className="button"
                        type="submit"
                        value="Spec Test Button 2"
            />
</Cell>,
        ],
        "className": "align-justify",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": "0",
          "nodeType": "function",
          "props": Object {
            "children": <input
              className="button"
              type="button"
              value="Spec Test Button 1"
/>,
            "className": "",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "className": "button",
              "type": "button",
              "value": "Spec Test Button 1",
            },
            "ref": null,
            "rendered": null,
            "type": "input",
          },
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": "1",
          "nodeType": "function",
          "props": Object {
            "children": <input
              className="button"
              type="submit"
              value="Spec Test Button 2"
/>,
            "className": "",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "className": "button",
              "type": "submit",
              "value": "Spec Test Button 2",
            },
            "ref": null,
            "rendered": null,
            "type": "input",
          },
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;

exports[`<BottonRow /> snapshots render a button row with one button 1`] = `
ShallowWrapper {
  "length": 1,
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <ButtonRow
    buttons={
        Array [
            Object {
              "text": "Spec Test",
            },
          ]
    }
/>,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <Cell
          className=""
>
          <input
                    className="button"
                    type="button"
                    value="Spec Test"
          />
</Cell>,
      ],
      "className": "align-justify",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": "0",
        "nodeType": "function",
        "props": Object {
          "children": <input
            className="button"
            type="button"
            value="Spec Test"
/>,
          "className": "",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "className": "button",
            "type": "button",
            "value": "Spec Test",
          },
          "ref": null,
          "rendered": null,
          "type": "input",
        },
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <Cell
            className=""
>
            <input
                        className="button"
                        type="button"
                        value="Spec Test"
            />
</Cell>,
        ],
        "className": "align-justify",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": "0",
          "nodeType": "function",
          "props": Object {
            "children": <input
              className="button"
              type="button"
              value="Spec Test"
/>,
            "className": "",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "className": "button",
              "type": "button",
              "value": "Spec Test",
            },
            "ref": null,
            "rendered": null,
            "type": "input",
          },
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
      },
    },
  },
}
`;
